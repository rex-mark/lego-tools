{"version":3,"sources":["src/common.js","date.js","obj.js","num.js","index.js"],"names":["module","exports","fillNum","num","targetLength","decimal","Math","pow","toFixed","substr","indexOf","common","require","polyFun","setTargetNum","tmpDate","type","setFullYear","getFullYear","setMonth","getMonth","setDate","getDate","setHours","getHours","setMinutes","getMinutes","setSeconds","getSeconds","setStringDate","date","Date","format","targetFormat","result","JSON","stringify","replace","add","sourceFormat","abs","subtract","now","diff","firstDate","sencodDate","tmpFirstTimes","getTime","tmpSecondTims","diffTimes","modDaysTimes","modHourTimes","days","parseInt","hours","minutes","seconds","copy","obj","parse","deepGet","keyStr","tmpObj","Array","reg","matchKeys","match","map","item","resultList","i","tmpKeyStr","forEach","value","isNaN","eval","push","length","error","console","warn","keys","split","key","hasOwnProperty","undefined","deepSet","keyLen","setKey","keyList","index","sort","data","express","start","preType","afterType","a","b","sortType","expressList","digitLength","eSplit","toString","len","float2Fixed","Number","dLen","checkBoundary","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","times","num1","num2","others","slice","num1Changed","num2Changed","baseNum","leftValue","plus","max","minus","div","compute","computeStr","operators","operator","fun","matchOperator","tmpStr","computeValue","regStr","RegExp","str","targetOperator","list","bracketValue","mathType","sourceType","formatMoney","n","$1"],"mappings":"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","file":"lego-tools.min.map","sourceRoot":"../..","sourcesContent":["module.exports = {\n    /**\n     * padding zero to num\n     * @param {*} num\n     * @param {*} targetLength - result num length\n     * @returns\n     */\n    fillNum(num, targetLength) {\n        let decimal = num / Math.pow(10, targetLength)\n        decimal = decimal.toFixed(targetLength) + ''\n        return decimal.substr(decimal.indexOf(\".\") + 1)\n    }\n}","const common = require('./src/common')\n\n/**\n * common funciton\n */\nconst polyFun = {\n    setTargetNum(tmpDate, num, type) {\n        if(type === 'years') tmpDate.setFullYear(tmpDate.getFullYear() + num)\n        else if(type === 'months') tmpDate.setMonth(tmpDate.getMonth() + num)\n        else if(type === 'days') tmpDate.setDate(tmpDate.getDate() + num)\n        else if(type === 'hours') tmpDate.setHours(tmpDate.getHours() + num)\n        else if(type === 'minutes') tmpDate.setMinutes(tmpDate.getMinutes() + num)\n        else if(type === 'seconds') tmpDate.setSeconds(tmpDate.getSeconds() + num)\n        return tmpDate\n    },\n    setStringDate(date) {\n        return typeof date === 'string' ? new Date(date) : date\n    }\n}\n\n/**\n * change date to trarget format\n * @param {Date|string} date - date object\n * @param {tring} targetFormat - yyyy-MM-dd HH:mm:ss\n * @return {string} string date\n */\nconst format = (date, targetFormat) => {\n    let tmpDate = polyFun.setStringDate(date)\n    let result = (JSON.stringify(targetFormat)).replace(/\"/g, '')\n    result = result.replace('yyyy', tmpDate.getFullYear())\n                    .replace('MM', common.fillNum(tmpDate.getMonth() + 1, 2))\n                    .replace('dd', common.fillNum(tmpDate.getDate(), 2))\n                    .replace('HH', common.fillNum(tmpDate.getHours(), 2))\n                    .replace('mm', common.fillNum(tmpDate.getMinutes(), 2))\n                    .replace('ss', common.fillNum(tmpDate.getSeconds(), 2))\n    return result\n}\n\n/**\n * add target num to date\n * @param {Date|string} date \n * @param {number} num \n * @param {string} type - years, months, days, hours, minutes, seconds\n * @param {string} sourceFormat -(AllowNull) format\n * @return {Date|string} \n */\nconst add = (date, num, type, sourceFormat) => {\n    let tmpDate = polyFun.setStringDate(date)\n    tmpDate = polyFun.setTargetNum(tmpDate, Math.abs(num), type)\n    \n    return (typeof date === 'string' && sourceFormat) ? format(tmpDate, sourceFormat) : tmpDate\n}\n\n/**\n * subtract target num to date\n * @param {Date|string} date \n * @param {number} num \n * @param {string} type - years, months, days, hours, minutes, seconds\n * @param {string} sourceFormat -(AllowNull) format\n * @return {Date|string}\n */\nconst subtract = (date, num, type, sourceFormat) => {\n    let tmpDate = polyFun.setStringDate(date)\n    tmpDate = polyFun.setTargetNum(tmpDate, -Math.abs(num), type)\n\n    return (typeof date === 'string' && sourceFormat) ? format(tmpDate, sourceFormat) : tmpDate\n}\n\n/**\n * get current date\n * @param {string} targetFormat -(AllowNull) date format\n * @return {Date|string}\n */\nconst now = (targetFormat) => {\n    let date = new Date()\n    return targetFormat ? format(date, targetFormat) : date\n}\n\n/**\n * date diff\n * @param {*} firstDate \n * @param {*} sencodDate \n * @return {*} {days, hours...seconds}\n */\nconst diff = (firstDate, sencodDate) => {\n    let tmpFirstTimes = (polyFun.setStringDate(firstDate)).getTime()\n    let tmpSecondTims = (polyFun.setStringDate(sencodDate)).getTime()\n    let diffTimes = Math.abs(tmpFirstTimes - tmpSecondTims)\n    \n    const DAYS_TIMS = 86400000\n    const HOURS_TIMS = 3600000\n    const MINUTES_TIMS = 60000\n    let days = parseInt(diffTimes / DAYS_TIMS)\n    let modDaysTimes = diffTimes % DAYS_TIMS\n    let hours = parseInt(modDaysTimes / HOURS_TIMS)\n    let modHourTimes = modDaysTimes % HOURS_TIMS\n    let minutes = parseInt(modHourTimes / MINUTES_TIMS)\n    let modMinuteTimes = modHourTimes % MINUTES_TIMS\n\n    return {\n        days: days,\n        hours: hours,\n        minutes: minutes,\n        seconds: parseInt(modMinuteTimes / 1000),\n    }\n}\n\nmodule.exports = {\n    format,\n    now,\n    add,\n    subtract,\n    diff,\n}","/**\n * copy object\n * @param {*} obj \n * @return {*}\n */\nconst copy = obj => {\n    return JSON.parse(JSON.stringify(obj))\n}\n\n/**\n * get value from object\n * @param {Object.<string,object>} obj - object\n * @param {string} keyStr - a.b.c.d... | 'a.b==b||a.b>=1' for array\n * @return {*}\n */\nconst deepGet = (obj, keyStr) => {//detail.age>=22&&(detail.name=Tom||detail.name=Ken)\n    let tmpObj = copy(obj)\n    if(tmpObj instanceof Array) {\n        let reg = /(\\w+.)*\\w[>=<]+/g\n        let matchKeys = keyStr.match(reg)\n        matchKeys = matchKeys.map(item => item.replace(/=/g, '').replace(/>/, '').replace(/</, ''))\n        let resultList = []\n        try {\n            for(let i=0; i<obj.length; i++) {\n                let tmpKeyStr = keyStr + ''\n                matchKeys.forEach(item => {\n                    let value = deepGet(obj[i], item)\n                    isNaN(value) ? value = `\"${value}\"` : value\n                    tmpKeyStr = tmpKeyStr.replace(item, value)\n                })\n                if(eval(tmpKeyStr)) resultList.push(obj[i])\n            }\n        } catch (error) {\n            console.warn('keyStr is invalid', error)   \n        }\n        return resultList.length ? resultList : null\n    }else{\n        const keys = keyStr.split('.')\n        keys.forEach(key => { tmpObj = (tmpObj && tmpObj.hasOwnProperty(key)) ? tmpObj[key] : undefined })\n        return tmpObj\n    }\n}\n\n/**\n * set value to object\n * @param {Object.<string,object>} obj - object\n * @param {string} keyStr - a.b.c.d\n * @param {*} value \n * @return {Object.<string,object>}\n */\nconst deepSet = (obj, keyStr, value) => {\n    const keys = keyStr.split('.')\n    let keyLen = keys.length\n\n    function setKey(tmpObj, keyList, index) {\n        let key = keyList[index]\n        if(index === (keyLen - 1)) {\n            tmpObj[key] = value\n        }else{\n            if(!obj.hasOwnProperty(key)) tmpObj[key] = {}\n            setKey(tmpObj[key], keyList, ++index)\n        }\n    }\n    setKey(obj, keys, 0)\n    return obj\n}\n\n/**\n * sort array\n * @param {Array} data \n * @param {string} express - desc/asc => detail.age:desc\n * @return {array} data\n */\nconst sort = (data, express) => {\n    let start = (type, keyStr) => {\n        let preType = 1 * type\n        let afterType = -1 * type\n\n        if(keyStr) {\n            data.sort((a, b) => {\n                if(deepGet(a, keyStr) > deepGet(b, keyStr)) return preType\n                else return afterType\n            })\n        }else{\n            data.sort((a, b) => {\n                if(a > b) return preType\n                else return afterType\n            })\n        }\n    }\n    let sortType = null\n    let keyStr = null\n\n    if(express.indexOf(':') > 0) {\n        let expressList = express.split(':')\n        sortType = expressList[1]\n        keyStr = expressList[0]\n    }else{\n        sortType = express\n    }\n\n    if(sortType === 'asc') start(1, keyStr)\n    else if(sortType === 'desc') start(-1, keyStr)\n\n    return data\n}\n\nmodule.exports = {\n    copy,\n    deepGet,\n    deepSet,\n    sort,\n}","//author: @camsong\nconst common = {\n    digitLength: num => {\n        const eSplit = num.toString().split(/[eE]/);\n        const len = (eSplit[0].split('.')[1] || '').length - (+(eSplit[1] || 0));\n        return len > 0 ? len : 0;\n    },\n    float2Fixed: num => {\n        if (num.toString().indexOf('e') === -1) {\n            return Number(num.toString().replace('.', ''));\n        }\n        const dLen = common.digitLength(num);\n        return dLen > 0 ? num * Math.pow(10, dLen) : num;\n    },\n    checkBoundary: num => {\n        if (num > Number.MAX_SAFE_INTEGER || num < Number.MIN_SAFE_INTEGER) {\n            console.warn(`${num} is beyond boundary when transfer to integer, the results may not be accurate`);\n        }\n    },\n    times: (num1, num2, ...others) => {\n        if (others.length > 0) {\n            return common.times(common.times(num1, num2), others[0], ...others.slice(1));\n        }\n        const num1Changed = common.float2Fixed(num1);\n        const num2Changed = common.float2Fixed(num2);\n        const baseNum = common.digitLength(num1) + common.digitLength(num2);\n        const leftValue = num1Changed * num2Changed;\n    \n        common.checkBoundary(leftValue);\n    \n        return leftValue / Math.pow(10, baseNum);\n    },\n    plus: (num1, num2, ...others) => {\n        if (others.length > 0) {\n            return common.plus(common.plus(num1, num2), others[0], ...others.slice(1));\n        }\n        const baseNum = Math.pow(10, Math.max(common.digitLength(num1), common.digitLength(num2)));\n        return (common.times(num1, baseNum) + common.times(num2, baseNum)) / baseNum;\n    },\n    minus: (num1, num2, ...others) => {\n        if (others.length > 0) {\n            return common.minus(common.minus(num1, num2), others[0], ...others.slice(1));\n        }\n        const baseNum = Math.pow(10, Math.max(common.digitLength(num1), common.digitLength(num2)));\n        return (common.times(num1, baseNum) - common.times(num2, baseNum)) / baseNum;\n    },\n    div: (num1, num2, ...others) => {\n        if (others.length > 0) {\n            return common.div(common.div(num1, num2), others[0], ...others.slice(1));\n        }\n        const num1Changed = common.float2Fixed(num1);\n        const num2Changed = common.float2Fixed(num2);\n        common.checkBoundary(num1Changed);\n        common.checkBoundary(num2Changed);\n        return common.times((num1Changed / num2Changed), Math.pow(10, common.digitLength(num2) - common.digitLength(num1)));\n    }\n}\n\n/**\n * support js to compute the times,div,plus,minus\n * @param {String} computeStr - 39.9\\*3-(2/5)+3\\*6\n * @return {number}\n */\nconst compute = computeStr => {\n    const operators = [\n        {operator: '*', fun: 'times'},\n        {operator: '/', fun: 'div'},\n        {operator: '+', fun: 'plus'},\n        {operator: '-', fun: 'minus'},\n    ]\n    const matchOperator = (tmpStr, computeValue) => {\n        tmpStr = tmpStr.replace('(', '').replace(')', '')\n        let value = null\n        const start = (regStr) => {\n            const reg = new RegExp(`([0-9.]+)[${regStr}]([0-9.]+)`)\n            let str = tmpStr.match(reg)[0]\n            let targetOperator = {}\n            for(let i=0; i<operators.length; i++) {\n                if(str.indexOf(operators[i].operator) > 0) {\n                    targetOperator = operators[i]\n                    break\n                }\n            }\n\n            const list = str.split(targetOperator.operator)\n            value = common[targetOperator.fun](list[0], list[1])\n            tmpStr = tmpStr.replace(str, value)\n        }\n\n        if(tmpStr.indexOf('*') > 0 || tmpStr.indexOf('/') > 0) {\n            start('\\*\\/')\n            return matchOperator(tmpStr, value)\n        }else if(tmpStr.indexOf('+') > 0 || tmpStr.indexOf('-') > 0){\n            start('\\\\+\\\\-')\n            return matchOperator(tmpStr, value)\n        }else{\n            return computeValue\n        }\n    }\n\n    //compute the bracket\n    const bracketReg = /\\(([^)]*)\\)/g\n    const bracketValue = computeStr.match(bracketReg)\n    if(bracketValue && bracketValue.length) {\n        bracketValue.forEach(item => {\n            computeStr = computeStr.replace(item, matchOperator(item))\n        })\n    }\n\n    return matchOperator(computeStr)\n}\n\n/**\n * \n * @param {String|Number} num \n * @param {String} targetFormat - support: '.', '.0', '.000'|...\n * @param {String} mathType  - support: ceil, round, floor\n * @return {String|Number} example: (1234.78, '.0', 'round') => 1,234.78\n */\nconst format = (num, targetFormat, mathType) => {\n    let sourceType = typeof num\n    if(targetFormat && mathType) {\n        let div = parseInt(targetFormat.replace('.', 1))\n        num = Math[mathType](num * div) / div\n    }\n    return sourceType === 'string' ? (num + '') : num\n}\n\n/**\n * \n * @param {String|Number} num \n * @param {String} targetFormat - support: '.'|int, '.0'|other mathType, '.000'|other mathType\n * @param {String} mathType  - support: int, ceil, round, floor\n * @return {String} example: (1234.78, '.0', 'round') => 1,234.78\n */\nconst formatMoney = (num, targetFormat, mathType) => {\n    if(mathType && targetFormat) {\n        if(mathType === 'int') {\n            num = parseInt(num)\n        }else {\n            let div = parseInt(targetFormat.replace('.', 1))\n            num = Math[mathType](num * div) / div\n        }\n    }\n\n    let value = num.toString().replace(/\\d+/, n => {\n        return n.replace(/(\\d)(?=(\\d{3})+$)/g, $1 => {\n            return $1 + ','\n        })\n    })\n    return value\n}\n\nmodule.exports = {\n    format,\n    formatMoney,\n    compute,\n}","const date = require('./date')//12kb\nconst obj = require('./obj')//11kb\nconst num = require('./num')//13kb\n\nmodule.exports = {\n    date,\n    obj,\n    num,\n}"]}